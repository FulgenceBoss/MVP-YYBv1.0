# DOCUMENT DE RÉFÉRENCE - DÉVELOPPEMENT MVP YESSI-YESSI
# Mis à jour le: 14/06/2025

---

### STACK TECHNIQUE
- **Frontend :** React Native (Expo SDK 51+), Redux Toolkit, React Navigation, Axios.
- **Backend :** Node.js, Express.js, Mongoose, JWT, bcryptjs, `node-cron`.
- **Base de données :** MongoDB (via MongoDB Atlas).
- **Sécurité :** `helmet`, `express-rate-limit`, validation des entrées.

---

### DOCUMENTATION DES API

#### API Endpoint: `POST /api/auth/register`
- **Description:** Enregistre un nouvel utilisateur et envoie un code OTP (simulé).
- **Fichier Contrôleur:** `backend/controllers/authController.js` (fonction `registerUser`)
- **Protection:** Publique, avec limitation de débit.
- **Corps de la requête :**
  ```json
  { "fullName": "John Doe", "phoneNumber": "061234567", "pin": "1234" }
  ```
- **Réponse (Succès - 201 Created):** `{"success": true, "message": "Utilisateur enregistré..."}`
- **Réponses (Erreur):** `400` (Données invalides, utilisateur existant), `500` (Erreur serveur).

#### API Endpoint: `POST /api/auth/verify-otp`
- **Description:** Vérifie un code OTP pour finaliser l'inscription et renvoie un token JWT.
- **Fichier Contrôleur:** `backend/controllers/authController.js` (fonction `verifyOtp`)
- **Protection:** Publique.
- **Corps de la requête :**
  ```json
  { "phoneNumber": "061234567", "otpCode": "987654" }
  ```
- **Réponse (Succès - 200 OK):** `{"success": true, "token": "[JWT_TOKEN]"}`
- **Réponses (Erreur):** `400` (Utilisateur non trouvé, OTP invalide/expiré).

#### API Endpoint: `POST /api/auth/login`
- **Description:** Connecte un utilisateur existant et renvoie un token JWT.
- **Fichier Contrôleur:** `backend/controllers/authController.js` (fonction `loginUser`)
- **Protection:** Publique, avec limitation de débit.
- **Corps de la requête :**
  ```json
  { "phoneNumber": "061234567", "pin": "1234" }
  ```
- **Réponse (Succès - 200 OK):** `{"success": true, "token": "[JWT_TOKEN]"}`
- **Réponses (Erreur):** `400` (Identifiants incorrects, utilisateur non trouvé).

---

### FONCTIONNALITÉS IMPLÉMENTÉES

- **Flux d'authentification complet :**
  - Écrans `SignUpScreen`, `OtpScreen`, et `LoginScreen` 100% fonctionnels et robustes.
  - Logique de redirection post-authentification via Redux et `AppNavigator`.
- **Flux de configuration de l'épargne :**
  - Écrans `AmountSelectionScreen` et `FinalConfigScreen` fonctionnels.
  - Sauvegarde de la configuration via des mises à jour partielles au backend.
- **Processeur d'Épargne Automatisé (Backend) :**
  - Le service CRON (`cronService.js`) est implémenté mais **désactivé en développement** pour garantir la stabilité du serveur.
- **Tableau de Bord :**
  - Le `DashboardScreen` a été refactorisé pour corriger l'avertissement `VirtualizedLists` et affiche le solde et l'historique de l'utilisateur.
  - Le composant `StreakCounter` est intégré.
- **Historique des transactions :**
  - L'affichage de l'historique des transactions est désormais validé et fonctionnel.
- **Navigation Intelligente :**
  - Un écran `AppLoadingScreen` vérifie la configuration et redirige correctement.
- **Configuration API Robuste :**
  - L'URL de l'API est maintenant gérée dans un fichier de configuration dédié, non suivi par Git.

---

### ÉTAT ACTUEL DU DÉVELOPPEMENT (Point de reprise)

- **Objectif Atteint :** L'ensemble du flux d'authentification (inscription et connexion) et l'affichage du tableau de bord sont maintenant stables et validés.
- **Progrès :** Tous les bugs critiques qui bloquaient l'inscription ont été résolus.
- **Point de Blocage :** Aucun blocage majeur identifié. Le projet est sur une base saine pour la suite.
- **Prochaine Action :** Identifier la prochaine tâche prioritaire avec `task-master next` pour poursuivre le développement des fonctionnalités restantes du MVP.

---

### JOURNAL DES PROBLÈMES RÉSOLUS

- **Échec Silencieux de l'Inscription/Connexion :** Un débogage approfondi a révélé plusieurs problèmes en cascade :
  1.  **Cause Initiale :** Une mauvaise configuration de l'URL de l'API dans le code client.
  2.  **Cause Profonde :** Un bug dans le `authSlice` de Redux où les reducers `setLoading` et `setError` n'étaient pas définis, provoquant un gel de l'application au moment du `dispatch`.
- **`ERR_NETWORK` au Login :** Ce problème était un "faux positif" causé par le gel de l'application dû au bug Redux. La connectivité réseau était en réalité fonctionnelle.
- **Instabilité du Serveur Backend :** La tâche CRON s'exécutait toutes les minutes et entrait en conflit avec les requêtes de l'API, bloquant le processus Node.js. **Solution :** Les tâches CRON sont maintenant désactivées en mode développement.
- **Avertissement `VirtualizedLists` sur le Dashboard :** Le `ScrollView` a été remplacé par une `FlatList` avec un `ListHeaderComponent` pour une performance et une structure optimales.
- **...et de nombreux autres problèmes de configuration et de logique résolus lors de cette session de débogage intensive.** 